Python 3.4.3 |Anaconda 2.3.0 (x86_64)| (default, Mar  6 2015, 12:07:41) 
[GCC 4.2.1 (Apple Inc. build 5577)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> 
>>> import random
>>> 
>>> heights = [random.normalvariate(70, 4) for i in range(10000)]
>>> len(heights)
10000
>>> import pylab
>>> pylab.hist(heights, 100)
(array([   1.,    1.,    0.,    0.,    1.,    0.,    2.,    0.,    1.,
          1.,    4.,    3.,    5.,    6.,   13.,   12.,   10.,   10.,
         13.,   28.,   22.,   24.,   39.,   35.,   38.,   42.,   48.,
         55.,   83.,   73.,   96.,  100.,  102.,  117.,  124.,  125.,
        159.,  158.,  165.,  182.,  207.,  221.,  270.,  225.,  241.,
        256.,  256.,  277.,  275.,  266.,  278.,  273.,  239.,  269.,
        265.,  274.,  262.,  272.,  233.,  249.,  220.,  254.,  237.,
        194.,  209.,  180.,  169.,  169.,  148.,  146.,  124.,  116.,
        101.,   86.,   73.,   72.,   74.,   58.,   37.,   42.,   41.,
         46.,   35.,   25.,   24.,   18.,   11.,   17.,    9.,   12.,
         15.,    9.,    4.,    4.,    2.,    6.,    1.,    1.,    1.,    4.]), array([ 55.29983979,  55.58077402,  55.86170826,  56.1426425 ,
        56.42357673,  56.70451097,  56.9854452 ,  57.26637944,
        57.54731368,  57.82824791,  58.10918215,  58.39011639,
        58.67105062,  58.95198486,  59.2329191 ,  59.51385333,
        59.79478757,  60.07572181,  60.35665604,  60.63759028,
        60.91852452,  61.19945875,  61.48039299,  61.76132722,
        62.04226146,  62.3231957 ,  62.60412993,  62.88506417,
        63.16599841,  63.44693264,  63.72786688,  64.00880112,
        64.28973535,  64.57066959,  64.85160383,  65.13253806,
        65.4134723 ,  65.69440653,  65.97534077,  66.25627501,
        66.53720924,  66.81814348,  67.09907772,  67.38001195,
        67.66094619,  67.94188043,  68.22281466,  68.5037489 ,
        68.78468314,  69.06561737,  69.34655161,  69.62748585,
        69.90842008,  70.18935432,  70.47028855,  70.75122279,
        71.03215703,  71.31309126,  71.5940255 ,  71.87495974,
        72.15589397,  72.43682821,  72.71776245,  72.99869668,
        73.27963092,  73.56056516,  73.84149939,  74.12243363,
        74.40336786,  74.6843021 ,  74.96523634,  75.24617057,
        75.52710481,  75.80803905,  76.08897328,  76.36990752,
        76.65084176,  76.93177599,  77.21271023,  77.49364447,
        77.7745787 ,  78.05551294,  78.33644718,  78.61738141,
        78.89831565,  79.17924988,  79.46018412,  79.74111836,
        80.02205259,  80.30298683,  80.58392107,  80.8648553 ,
        81.14578954,  81.42672378,  81.70765801,  81.98859225,
        82.26952649,  82.55046072,  82.83139496,  83.1123292 ,  83.39326343]), <a list of 100 Patch objects>)
>>> pylab.xlabel('Height (in)')
<matplotlib.text.Text object at 0x1007ce780>
>>> pylab.ylabel('Frequency')
<matplotlib.text.Text object at 0x104f531d0>
>>> pylab.show()
>>> 
>>> 
>>> # comments
... 
>>> i = 0
>>> 
>>> # add one to i
... 
>>> i = i + 1
>>> 
>>> # add one to j
... 
>>> i = i + 1
>>> 
>>> # add one to the number of wins
... 
>>> i = i + 1
>>> 
>>> number_of_wins = 0
>>> number_of_wins = number_of_wins + 1
>>> 
>>> 
>>> 
>>> def rollDice():
    return random.randint(1, 6)
... ... 
>>> 
>>> rollDice()
2
>>> rollDice()
6
>>> rollDice()
1
>>> 
>>> # Test n rolls of a dice with 6 sides
def diceExperiment(n):
    freq = {}
    for i in range(n):
        roll = rollDice()
        if roll in freq:
            freq[roll] += 1
        else:
            freq[roll] = 1
    return freq
... ... ... ... ... ... ... ... ... ... 
>>> 
>>> diceExperiment(600)
{1: 96, 2: 116, 3: 92, 4: 106, 5: 100, 6: 90}
>>> 
>>> # OrderedDict stores values in the order the key was added
... 
>>> import collections
>>> from collections import OrderedDict
>>> 
>>> def diceExperiment(n):
    freq = OrderedDict()
    for i in range(1, 7):
        freq[i] = 0
        
    for i in range(n):
        roll = rollDice()
        if roll in freq:
            freq[roll] += 1
        else:
            freq[roll] = 1
    return freq

... ... ... ... ... ... ... ... ... ... ... ... >>> 
>>> diceExperiment(600)
OrderedDict([(1, 105), (2, 96), (3, 111), (4, 84), (5, 104), (6, 100)])
>>> diceExperiment(6)
OrderedDict([(1, 1), (2, 1), (3, 1), (4, 1), (5, 2), (6, 0)])
>>> diceExperiment(60)
OrderedDict([(1, 9), (2, 11), (3, 8), (4, 13), (5, 10), (6, 9)])
>>> diceExperiment(1000000)
OrderedDict([(1, 167112), (2, 166638), (3, 167087), (4, 166898), (5, 166163), (6, 166102)])
>>> 
>>> from collections import Counter
>>> c = Counter([1, 2, 1, 1, 3])
>>> c
Counter({1: 3, 2: 1, 3: 1})
>>> c = Counter("Stuart Allen")
>>> c
Counter({'l': 2, 't': 2, 'n': 1, 'S': 1, 'u': 1, ' ': 1, 'A': 1, 'e': 1, 'r': 1, 'a': 1})
>>> c.update("Michael")
>>> c
Counter({'l': 3, 't': 2, 'a': 2, 'e': 2, 'n': 1, 'A': 1, 'i': 1, ' ': 1, 'h': 1, 'c': 1, 'u': 1, 'M': 1, 'r': 1, 'S': 1})
>>> 
>>> 
>>> [x**x for x in range(1,11)]
[1, 4, 27, 256, 3125, 46656, 823543, 16777216, 387420489, 10000000000]
>>> [x**2 for x in range(1,11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
>>> 
>>> 
>>> from collections import Counter
def diceExperiment(n):
    # List comprehension
    return Counter([rollDice() for x in range(n)])
>>> ... ... ... 
>>> 
>>> diceExperiment(60000)
Counter({6: 10107, 3: 10105, 1: 10035, 4: 10029, 2: 9923, 5: 9801})
>>> 